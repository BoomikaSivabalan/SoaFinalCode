"use client"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import { User, UserRole } from "@/types/user"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Loader2, Plus, Trash2 } from "lucide-react"
import { createRFQ, getProductsBySupplier, getSuppliers, Product, QuotationType } from "@/lib/api"
import { useAuth } from "@/contexts/auth.context"

export default function CreateRFQPage() {
    const { user, loading: authLoading } = useAuth()
    const [suppliers, setSuppliers] = useState<User[]>([])
    const [products, setProducts] = useState<Product[]>([])
    const [loading, setLoading] = useState(true)
    const [submitting, setSubmitting] = useState(false)
    const [error, setError] = useState<string | null>(null)
    const router = useRouter()

    // Form state
    const [selectedSupplierId, setSelectedSupplierId] = useState<string>("")
    const [notes, setNotes] = useState<string>("")
    const [selectedProducts, setSelectedProducts] = useState<Array<{ productId: number; quantity: number }>>([])

    // Fetch suppliers when the component mounts
    useEffect(() => {
        if (authLoading) return // Don't run effect if auth is still loading

        const fetchSuppliers = async () => {
            try {
                if (user?.role !== UserRole.admin) {
                    router.push("/quotations")
                    return
                }

                // Fetch suppliers
                const suppliersData = await getSuppliers()
                setSuppliers(suppliersData)
            } catch (err) {
                setError(err instanceof Error ? err.message : "An error occurred")
            } finally {
                setLoading(false)
            }
        }

        fetchSuppliers()
    }, [authLoading, user, router])

    // Fetch products when the selected supplier changes
    useEffect(() => {
        if (!selectedSupplierId) return // Don't fetch products if no supplier is selected

        const fetchProducts = async () => {
            try {
                const productsData = await getProductsBySupplier(Number.parseInt(selectedSupplierId))
                setProducts(productsData)
            } catch (err) {
                setError(err instanceof Error ? err.message : "Failed to fetch products")
            }
        }

        fetchProducts()
    }, [selectedSupplierId])

    // Clear selected products when the supplier changes
    useEffect(() => {
        setSelectedProducts([])
    }, [selectedSupplierId])

    const handleAddProduct = () => {
        setSelectedProducts([...selectedProducts, { productId: 0, quantity: 1 }])
    }

    const handleRemoveProduct = (index: number) => {
        const updatedProducts = [...selectedProducts]
        updatedProducts.splice(index, 1)
        setSelectedProducts(updatedProducts)
    }

    const handleProductChange = (index: number, field: string, value: number) => {
        const updatedProducts = [...selectedProducts]
        updatedProducts[index] = { ...updatedProducts[index], [field]: value }
        setSelectedProducts(updatedProducts)
    }

    const handleSubmit = async () => {
        if (!user) return

        if (!selectedSupplierId) {
            setError("Please select a supplier")
            return
        }

        if (selectedProducts.length === 0) {
            setError("Please add at least one product")
            return
        }

        // Validate product selections
        const invalidProducts = selectedProducts.filter((p) => p.productId === 0 || p.quantity < 1)
        if (invalidProducts.length > 0) {
            setError("Please select valid products and quantities")
            return
        }

        setSubmitting(true)
        setError(null)

        try {
            await createRFQ({
                quotationType: QuotationType.request,
                adminId: user.id,
                supplierId: Number.parseInt(selectedSupplierId),
                notes,
                quotationProducts: selectedProducts.map((p) => ({
                    productId: p.productId,
                    quantity: p.quantity,
                    price: 0, // Assuming price will be provided later by the supplier
                    id: 0, // ID is usually generated by the backend
                    quotationId: 0, // Quotation ID will be assigned by the backend
                })),
            })

            router.push("/quotations")
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to create RFQ")
            setSubmitting(false)
        }
    }

    if (authLoading || loading || !user) {
        return (
            <div className="flex h-[50vh] items-center justify-center">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
                <span className="ml-2">Loading...</span>
            </div>
        )
    }

    return (
        <div className="container mx-auto py-8">
            <div className="mb-6">
                <h1 className="text-3xl font-bold">Create Request for Quotation</h1>
                <p className="text-muted-foreground">Request pricing from suppliers for specific products</p>
            </div>

            <Card>
                <CardHeader>
                    <CardTitle>RFQ Details</CardTitle>
                    <CardDescription>Fill in the details for your request for quotation</CardDescription>
                </CardHeader>

                <CardContent className="space-y-6">
                    {error && <div className="rounded-md bg-destructive/10 p-4 text-destructive">{error}</div>}

                    <div className="space-y-2">
                        <Label htmlFor="supplier">Supplier</Label>
                        <Select value={selectedSupplierId} onValueChange={setSelectedSupplierId}>
                            <SelectTrigger id="supplier">
                                <SelectValue placeholder="Select a supplier" />
                            </SelectTrigger>
                            <SelectContent>
                                {suppliers.map((supplier) => (
                                    <SelectItem key={supplier.id} value={supplier.id.toString()}>
                                        {supplier.companyName}
                                    </SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                    </div>

                    <div className="space-y-2">
                        <Label htmlFor="notes">Notes</Label>
                        <Textarea
                            id="notes"
                            placeholder="Add any additional information for the supplier"
                            value={notes}
                            onChange={(e) => setNotes(e.target.value)}
                        />
                    </div>

                    <div className="space-y-4">
                        <div className="flex items-center justify-between">
                            <Label>Products</Label>
                            <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={handleAddProduct}
                                className="flex items-center gap-1"
                                disabled={!selectedSupplierId} // Disable if no supplier is selected
                            >
                                <Plus className="h-4 w-4" /> Add Product
                            </Button>
                        </div>

                        {selectedProducts.length === 0 ? (
                            <div className="rounded-md border border-dashed p-6 text-center text-muted-foreground">
                                No products added. Click &#34;Add Product&#34; to start.
                            </div>
                        ) : (
                            <div className="space-y-4">
                                {selectedProducts.map((product, index) => (
                                    <div key={index} className="grid grid-cols-12 gap-4 rounded-md border p-4">
                                        <div className="col-span-6">
                                            <Label htmlFor={`product-${index}`} className="mb-2 block">
                                                Product
                                            </Label>
                                            <Select
                                                value={product.productId.toString()}
                                                onValueChange={(value) => handleProductChange(index, "productId", Number.parseInt(value))}
                                            >
                                                <SelectTrigger id={`product-${index}`}>
                                                    <SelectValue placeholder="Select a product" />
                                                </SelectTrigger>
                                                <SelectContent>
                                                    {products.map((p) => (
                                                        <SelectItem key={p.id} value={p.id.toString()}>
                                                            {p.name}
                                                        </SelectItem>
                                                    ))}
                                                </SelectContent>
                                            </Select>
                                        </div>

                                        <div className="col-span-4">
                                            <Label htmlFor={`quantity-${index}`} className="mb-2 block">
                                                Quantity
                                            </Label>
                                            <Input
                                                id={`quantity-${index}`}
                                                type="number"
                                                min="1"
                                                value={product.quantity}
                                                onChange={(e) => handleProductChange(index, "quantity", Number.parseInt(e.target.value))}
                                            />
                                        </div>

                                        <div className="col-span-2 flex items-end justify-end">
                                            <Button
                                                type="button"
                                                variant="ghost"
                                                size="icon"
                                                onClick={() => handleRemoveProduct(index)}
                                                className="text-destructive hover:bg-destructive/10 hover:text-destructive"
                                            >
                                                <Trash2 className="h-5 w-5" />
                                            </Button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                </CardContent>

                <CardFooter className="flex justify-end gap-2 border-t p-6">
                    <Button variant="outline" onClick={() => router.push("/quotations")} disabled={submitting}>
                        Cancel
                    </Button>
                    <Button onClick={handleSubmit} disabled={submitting}>
                        {submitting ? (
                            <>
                                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                Creating...
                            </>
                        ) : (
                            "Create RFQ"
                        )}
                    </Button>
                </CardFooter>
            </Card>
        </div>
    )
}